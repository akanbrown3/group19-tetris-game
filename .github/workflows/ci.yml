name: Tetris Game CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Install dependencies with pipenv
      run: |
        pipenv install --deploy --dev

    - name: Verify file structure
      run: |
        if [ ! -f 'src/main.py' ]; then echo '❌ src/main.py missing'; exit 1; fi
        if [ ! -f 'src/board.py' ]; then echo '❌ src/board.py missing'; exit 1; fi
        if [ ! -f 'src/piece.py' ]; then echo '❌ src/piece.py missing'; exit 1; fi
        if [ ! -f 'src/ui.py' ]; then echo '❌ src/ui.py missing'; exit 1; fi
        if [ ! -f 'Pipfile' ]; then echo '❌ Pipfile missing'; exit 1; fi
        if [ ! -f 'Pipfile.lock' ]; then echo '❌ Pipfile.lock missing'; exit 1; fi
        if [ ! -d 'tests' ]; then echo '❌ tests directory missing'; exit 1; fi
        echo '✓ All required files present'

    - name: Run pytest tests
      run: |
        pipenv run pytest tests/ -v --tb=short

    - name: Test basic imports without pygame display
      run: |
        pipenv run python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        
        # Test basic imports
        from board import Board
        from piece import Piece
        
        # Test basic object creation
        board = Board()
        piece = Piece()
        
        print('✓ Core game logic imports successful')
        print('✓ Basic object creation successful')
        print('✓ Board dimensions:', board.width, 'x', board.height)
        print('✓ Piece types available:', len(piece.SHAPES))
        "

    - name: Validate Pipfile configuration
      run: |
        if ! pipenv verify; then
          echo '❌ Pipfile.lock is out of date or invalid'
          exit 1
        fi
        echo '✓ Pipfile.lock is valid and up to date'

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pipenv and linting tools
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Install dependencies
      run: |
        pipenv install --deploy --dev

    - name: Run basic syntax check
      run: |
        pipenv run python -m py_compile src/*.py
        echo '✓ All Python files have valid syntax'

    - name: Check code formatting (if black is available)
      run: |
        if pipenv run black --version 2>/dev/null; then
          pipenv run black --check src/ tests/
        else
          echo '⚠️ Black not installed, skipping format check'
        fi

  integration:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies for headless testing
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Install dependencies
      run: |
        pipenv install --deploy --dev

    - name: Test game imports with virtual display
      run: |
        xvfb-run -a pipenv run python -c "
        import sys
        sys.path.insert(0, 'src')
        
        # Test pygame initialization
        import pygame
        pygame.init()
        pygame.quit()
        print('✓ Pygame initialized successfully')
        
        # Test all game modules import without errors
        from board import Board
        from piece import Piece
        from ui import TetrisRenderer
        from main import TetrisGame, GameState
        
        print('✓ All game modules imported successfully')
        
        # Test basic game object creation
        board = Board()
        piece = Piece()
        renderer = TetrisRenderer()
        
        print('✓ Game objects created successfully')
        print('✓ Integration test passed')
        "