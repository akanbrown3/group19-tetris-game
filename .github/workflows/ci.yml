name: Tetris Game CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-setuptools

    - name: Install dependencies directly
      run: |
        python -m pip install --upgrade pip
        pip install pygame pytest pytest-cov

    - name: Verify file structure
      run: |
        if [ ! -f 'src/main.py' ]; then echo '❌ src/main.py missing'; exit 1; fi
        if [ ! -f 'src/board.py' ]; then echo '❌ src/board.py missing'; exit 1; fi
        if [ ! -f 'src/piece.py' ]; then echo '❌ src/piece.py missing'; exit 1; fi
        if [ ! -f 'src/ui.py' ]; then echo '❌ src/ui.py missing'; exit 1; fi
        if [ ! -f 'Pipfile' ]; then echo '❌ Pipfile missing'; exit 1; fi
        if [ ! -d 'tests' ]; then echo '❌ tests directory missing'; exit 1; fi
        echo '✓ All required files present'

    - name: Run pytest tests
      run: |
        pytest tests/ -v --tb=short

    - name: Test basic imports without display
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, '.')
        
        # Test basic imports without pygame display
        from src.board import Board
        from src.piece import Piece
        
        # Test basic object creation
        board = Board()
        piece = Piece()
        
        print('✓ Core game logic imports successful')
        print('✓ Basic object creation successful')
        print('✓ Board dimensions:', board.width, 'x', board.height)
        print('✓ Piece types available:', len(piece.SHAPES))
        "

  pipenv-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Create Pipfile.lock if missing
      run: |
        if [ ! -f 'Pipfile.lock' ]; then
          echo "Creating Pipfile.lock..."
          pipenv lock
        fi

    - name: Install with pipenv
      run: |
        pipenv install --dev

    - name: Run tests with pipenv
      run: |
        pipenv run pytest tests/ -v --tb=short

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygame pytest

    - name: Run basic syntax check
      run: |
        python -m py_compile src/*.py
        echo '✓ All Python files have valid syntax'

  integration:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies for pygame
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev libasound2-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygame

    - name: Test pygame with dummy driver
      run: |
        export SDL_VIDEODRIVER=dummy
        python -c "
        import sys
        import os
        import pygame
        
        # Initialize pygame with dummy video driver
        os.environ['SDL_VIDEODRIVER'] = 'dummy'
        pygame.init()
        print('✓ Pygame initialized successfully')
        pygame.quit()
        
        # Test basic game module imports
        sys.path.insert(0, '.')
        from src.board import Board
        from src.piece import Piece
        print('✓ Core modules imported successfully')
        "